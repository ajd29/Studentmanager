import java.io.FileNotFoundException;

/**
 *  Tests the methods in the MemoryManager class
 *
 *  @author ajd29
 *  @author collee57
 *  @version Dec 7, 2019
 */
public class MemoryManagerTest extends student.TestCase
{
    // private memory manager object
    MemoryManager manage;

    // private memory handle objects
    MemoryHandle mem;
    MemoryHandle mem1;
    MemoryHandle mem2;

    /**
     * Set up method called before every test
     * @throws FileNotFoundException
     */
    public void setUp() throws FileNotFoundException {
        manage = new MemoryManager();
        mem = new MemoryHandle(3, 5);
        mem1 = new MemoryHandle(8, 10);
        mem2 = new MemoryHandle(1, 2);
    }

    /**
     * Tests addFreeBlock()
     * @throws FileNotFoundException
     */
    public void testAddFreeBlock() throws FileNotFoundException {
        setUp();

        manage.addFreeBlock(mem1);
        assertEquals(manage.getFreeList().size(), 1);
        assertEquals(manage.getFreeList().get(0).getPos(), 8);

        manage.addFreeBlock(mem);
        assertEquals(manage.getFreeList().size(), 2);
        assertEquals(manage.getFreeList().get(0).getPos(), 3);

        manage.addFreeBlock(mem2);
        assertEquals(manage.getFreeList().size(), 3);
        assertEquals(manage.getFreeList().get(0).getPos(), 1);
    }

    /**
     * Tests mergeFree()
     * @throws FileNotFoundException
     */
    public void testMergeFree() throws FileNotFoundException {
        setUp();

        // free block starting at byte 8
        manage.addFreeBlock(mem1);

        // free block starting at byte 3
        manage.addFreeBlock(mem);

        // free block starting at byte 1
        manage.addFreeBlock(mem2);

        assertEquals(manage.getFreeList().get(1).getPos(), 3);

        manage.mergeFree();
        assertEquals(manage.getFreeList().size(), 1);
    }

    /**
     * Tests canMerge()
     *
     * @throws FileNotFoundException
     */
    public void testCanMerge() throws FileNotFoundException {
        setUp();
        manage.addFreeBlock(mem1);
        manage.addFreeBlock(mem);
        manage.addFreeBlock(mem2);
        assertEquals(manage.getFreeList().get(2), mem1);

        assertTrue(manage.canMerge());
        manage.mergeFree();
        assertFalse(manage.canMerge());
        // assertEquals(manage.getFreeList().size(), 1);
        System.out.println("first block: " +
        manage.getFreeList().get(0).getPos() + ", " +
            manage.getFreeList().get(0).getLength() + " second block: "
            + manage.getFreeList().get(1).getPos() + ", " +
            manage.getFreeList().get(1).getLength());
        manage.mergeFree();
        assertEquals(manage.getFreeList().size(), 1);
    }
}
